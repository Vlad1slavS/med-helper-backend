import os
import re

import dotenv
from langchain_core.prompts import PromptTemplate
from langchain_community.utilities import SQLDatabase
from langchain.chains import create_sql_query_chain
from langchain_gigachat import GigaChat

# Ключ авторизации
def extract_sql_query(response):
    """
    Извлекает SQL-запрос из переданной строки.

    Параметры:
    response (str): Строка, содержащая SQL-запрос.

    Возвращает:
    str: Извлечённый SQL-запрос без лишних символов в начале и конце, или None, если запрос не найден.
    """
    # Ищем совпадение с одним из следующих шаблонов:
    # 1. ```sql\n(.*?)\n``` - SQL-запрос, заключённый между маркерами ```sql и ```
    # 2. ```sql\n(.*?)\n - SQL-запрос, начинающийся с ```sql и продолжающийся до конца строки
    # 3. (\bSELECT\b.*?;) - SQL-запрос, начинающийся с ключевого слова SELECT и заканчивающийся точкой с запятой
    sql_query_match = re.search(
        r'```sql\n(.*?)\n```|```sql\n(.*?)\n|(\bSELECT\b.*?;)',
        response,
        re.DOTALL | re.IGNORECASE
    )
    if sql_query_match:
        # Извлекаем первую ненулевую группу из найденных совпадений
        sql_query = sql_query_match.group(1) or sql_query_match.group(2) or sql_query_match.group(3)
        # Удаляем лишние пробельные символы в начале и конце строки
        return sql_query.strip()
    # Если совпадение не найдено, возвращаем None
    return None

def get_voice_answer(text: str):
    dotenv.load_dotenv()

    API_KEY = os.getenv("GIGACHAT_API_KEY")
    DB_URL = os.getenv("DATABASE_URL")

    # Подключение к API GigaChat с использованием заданных параметров:
    # - credentials: ключ авторизации API
    # - verify_ssl_certs: отключение проверки SSL-сертификатов (False)
    # - profanity_check: отключение проверки на ненормативную лексику (False)
    # - model: выбор конкретной модели GigaChat ('GigaChat-Max')
    # - temperature: параметр, влияющий на степень случайности генерации (0.01)
    llm = GigaChat(credentials=API_KEY, verify_ssl_certs=False,
                   profanity_check=False, model='GigaChat-Max',
                   temperature=0.1)

    db = SQLDatabase.from_uri(DB_URL)

    # Определение шаблона промпта для генерации SQL-запросов и обработки их результатов.
    # Шаблон включает инструкции для модели по созданию корректных SQL-запросов и формату представления ответов на русском языке.
    template = ''' Вы эксперт по PostgreSQL. Учитывая входной вопрос, сначала создайте синтаксически правильный запрос PostgreSQL для запуска:
    затем просмотрите результаты запроса и верните ответ на введенный вопрос русскими словами. Ваш итоговый ответ должен содержать только русские слова, запрещено использовать sql в итоговом ответе.\nЕсли пользователь
    не указывает в вопросе определенное количество примеров, которые необходимо получить, запрашивается не более {top_k} результатов
    используя предложение LIMIT согласно PostgreSQL. Вы можете заказать результаты, чтобы получить наиболее информативные данные
    в базе данных.\nНикогда не запрашивайте все столбцы из таблицы. Вы должны запрашивать только те столбцы, которые необходимы.
    чтобы ответить на вопрос. Заключите каждое имя столбца в двойные кавычки (""), чтобы обозначить их как идентификаторы с разделителями.
    \nОбратите внимание: используйте только те имена столбцов, которые вы видите в таблицах ниже. Будьте осторожны, чтобы не задавать вопросы
    для столбцов, которые не существуют. Также обратите внимание, какой столбец в какой таблице находится.\nОбратите внимание
    использовать функцию CURRENT_DATE для получения текущей даты, если вопрос касается «today».
    \n\nИспользуйте следующий формат:\n\nВопрос: вопрос здесь\nОтвет: окончательный ответ на русском языке здесь\n\n
    Если задается вопрос о врачах, то ответ должен быть в формате Имя врача - цена\n Имя другого подходящего врача - цена\n\n Такой формат должен быть для всех подходящих врачей.
    \n\nЕсли задается вопрос об анализах или других медицинских обследованиях(рентген, МРТ и т.д.), то ответ должен быть в формате Название анализа - цена\n Название другого подходящего анализа - цена\n\n Такой формат должен быть для всех подходящих медицинских исследований.
    \n\nЗапрещено использовать в ответе слова вроде "```sql", "SELECT" и т.д. Используйте только следующие таблицы:\n{table_info}\n\nВопрос: {input}'''

    # Создание объекта PromptTemplate на основе заданного шаблона
    prompt = PromptTemplate.from_template(template)

    # Создание цепочки для генерации SQL-запросов с использованием LLM, базы данных и заданного промпта. Последний параметр - максимальное кол-во результатов
    chain = create_sql_query_chain(llm, db, prompt, 15)

    # Выполнение запроса пользователя: генерация SQL-запроса и получение ответа на вопрос
    response = chain.invoke({"question": text})

    # Если LLM-модель выдала SQL-запрос вместо ответа на вопрос, несмотря на наш промпт
    if response.strip()[0:6] == "```sql":
        return (db.run(extract_sql_query(response))) # Выполняем SQL-запрос
    else:
         return response
